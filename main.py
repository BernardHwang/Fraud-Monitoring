from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import smtplib, mimetypes, csv, requests, os, re
from datetime import datetime, timedelta
import pandas as pd
from jinja2 import Template
from requests.packages.urllib3.exceptions import InsecureRequestWarning # type: ignore # Suppress only the InsecureRequestWarning

# Email credentials
SMTP_SERVER = '10.28.51.200'
SMTP_PORT = 25
EMAIL_ADDRESS = 'AIOpsMBSB@coreconsulting.asia'
TO_EMAIL = 'adrian@coreconsulting.asia'
PLATFORM = 'CIB'
API_TOKEN = ''
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# Create the email
today_date = datetime.now().strftime('%d-%m-%Y')
yesterday_date = (datetime.now() - timedelta(1)).strftime('%d-%m-%Y')
directory = '/var/Business_automation'
today_csv = f"{directory}/{today_date}.csv"
yesterday_csv = f"{directory}/{yesterday_date}.csv"
today_individuals_csv = f"{directory}/{today_date}-individuals.csv"
yesterday_individuals_csv = f"{directory}/{yesterday_date}-individuals.csv"
summary_email_template_html = f"{directory}/summary_email_template.html"
real_time_email_template_html = f"{directory}/real_time_email_template.html"

# Ensure the CSV file exists or create it
if not os.path.exists(today_csv):
  summary_data = [
    ['Name','Acc No','Beneficiary Name','Occurrence 001','Occurrence 002','status 002','Occurrence 003','status 003','Occurrence 004','Occurrence 005','status 005']
  ]
  print(f"{today_date}.csv not found. Creating a new file.")
  with open(today_csv, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    for row in summary_data:
      writer.writerow(row)
else:
    print(f"{today_date}.csv found. Opening the file.")

if not os.path.exists(today_individuals_csv):
  summary_data = [
    ['Time','Sender Name','Sender Acc No','Beneficiary Name','Payment Type','Transfer Amount']
  ]
  print(f"{today_date}.csv not found. Creating a new file.")
  with open(today_individuals_csv, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    for row in summary_data:
      writer.writerow(row)
else:
    print(f"{today_date}-individuals.csv found. Opening the file.")

def generate_email(template_path, data):
  # Read the HTML template
  with open(template_path, 'r') as file:
    template_content = file.read()
  
  # Create Jinja2 template
  template = Template(template_content)
  
  # Render the template with provided data
  rendered_email = template.render(**data)
  
  return rendered_email

def send_email(email_data, criteria_num):
  # Create the email
  msg = MIMEMultipart("alternative")
  msg['Subject'] = f'[AUTOMATION] - [CIB] - Criteria {criteria_num} Violated - {today_date}'
  msg['From'] = EMAIL_ADDRESS
  msg['To'] = TO_EMAIL
  email_body = generate_email(real_time_email_template_html, email_data)
  email_body = re.sub(r"<!--.*?-->", "", email_body, flags=re.DOTALL)  # Remove comments
  email_body = re.sub(r">\s+<", "><", email_body)  # Remove whitespace between tags
  email_body = re.sub(r"\s+", " ", email_body)  # Replace multiple spaces with one
  email_body = email_body.strip()
  msg.attach(MIMEText(email_body, "html"))

  try:
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
      server.send_message(msg)
    print(f"Email sent to {TO_EMAIL}.")
  except Exception as e:
    print(f"Error sending email: {e}")

def summary_email(): 
  msg = MIMEMultipart("alternative")
  msg['Subject'] = f'[AUTOMATION] - [CIB] - Monetary Transaction Summary {today_date} '
  msg['From'] = EMAIL_ADDRESS
  msg['To'] = TO_EMAIL

  summary_data = [
    ["CIB Monetary Transaction Criteria Summary"],
    ["Date", datetime.now().strftime('%Y-%m-%d')],
    ["Generated by", "Core Consulting Automation Engine"],
    ["",""],
    ["Criteria ID", "Criteria Description", "Occurrence Threshold"],
    ["Criteria 001", "Trxn amount >= RM 100K", 1],
    ["Criteria 002", "Trxn frequency >= 3 AND Same Beneficiary Acc AND Same day", 3],
    ["Criteria 003", "Trxn amount <= RM 1K AND Trxn frequency >= 10 AND Same day", 10],
    ["Criteria 004", "Trxn amount >= RM 1 million", 1],
    ["Criteria 005", "JomPAY Trxn frequency >= 3 AND Same day", 3],
    ["",""],
    ["", "", "","Criteria 001", "", "Criteria 002", "", "Criteria 003", "", "Criteria 004", "", "Criteria 005"],
  ]

  header = ["Sender Company Acc No", "Sender Company Acc Name", "Occurrence 001", "Violation Count 001", "Occurrence 002", "Violation Count 002", "Occurrence 003", "Violation Count 003", "Occurrence 004", "Violation Count 004", "Occurrence 005", "Violation Count 005"]
  df_summary = pd.DataFrame(columns=header)
  df = pd.read_csv(yesterday_csv, delimiter=',')
  df.columns = df.columns.str.strip()
  df['Acc No']

  for index, row in df.iterrows():
    # Explicitly convert 'Acc No' to string
    data = [ 
      row['Acc No'],  # Ensure Acc No is treated as string
      row['Name'], 
      row['Occurrence 001'], 
      row['Occurrence 001'], 
      round(row['Occurrence 002'] / 3) * 3 if row['Occurrence 002'] >= 3 else 0,
      round(row['Occurrence 002'] / 3) if row['Occurrence 002'] >= 3 else 0,
      round(row['Occurrence 003'] / 10) * 10 if row['Occurrence 003'] >= 10 else 0,
      round(row['Occurrence 003'] / 10) if row['Occurrence 003'] >= 10 else 0,
      row['Occurrence 004'], 
      row['Occurrence 004'],
      round(row['Occurrence 005'] / 3) * 3 if row['Occurrence 005'] >= 3 else 0,
      round(row['Occurrence 005'] / 3) if row['Occurrence 005'] >= 3 else 0
    ]
    df_summary = df_summary._append(pd.DataFrame([data], columns=df_summary.columns), ignore_index=True)
      
  df_summary = df_summary.groupby(["Sender Company Acc No", "Sender Company Acc Name"]).sum().reset_index()
  df_summary.insert(0, 'No', df_summary.index + 1)
  df_summary["Sender Company Acc No"] = df_summary["Sender Company Acc No"].astype(str)
  with open(yesterday_csv, mode='w', newline='') as file:
    writer = csv.writer(file)
    for row in summary_data:
      writer.writerow(row)
  df_summary.to_csv(yesterday_csv, mode='a', index=False)

  df_individuals = pd.read_csv(yesterday_individuals_csv, delimiter=',')
  df_individuals.columns = df_individuals.columns.str.strip()
  with open(yesterday_individuals_csv, mode='w', newline='') as f:
    writer = csv.writer(f)
    for row in range(len(summary_data) - 1):
      writer.writerow(summary_data[row])
  df_individuals.to_csv(yesterday_individuals_csv, mode='a', index=False)

  email_data = {
    'date': yesterday_date,
    'count_001': df_summary["Violation Count 001"].sum(),
    'count_002': df_summary["Violation Count 002"].sum(),
    'count_003': df_summary["Violation Count 003"].sum(),
    'count_004': df_summary["Violation Count 004"].sum(),
    'count_005': df_summary["Violation Count 005"].sum(),
  }

  body = generate_email(summary_email_template_html, email_data)
  msg.attach(MIMEText(body, "html"))

  # Attach the CSV file
  mime_type, _ = mimetypes.guess_type(yesterday_csv)  # Guess the mime type based on file extension
  mime_type, mime_subtype = mime_type.split('/')

  with open(yesterday_csv, 'rb') as f:
    part = MIMEBase(mime_type, mime_subtype)
    part.set_payload(f.read())
    encoders.encode_base64(part)  # Encode file as Base64
    part.add_header(
      'Content-Disposition',
      f'attachment; filename="{yesterday_date}_CIB_Monetary Transaction Summary.csv"',
    )
    msg.attach(part)

  mime_type, _ = mimetypes.guess_type(yesterday_individuals_csv)  # Guess the mime type based on file extension
  mime_type, mime_subtype = mime_type.split('/')

  with open(yesterday_individuals_csv, 'rb') as f:
    part = MIMEBase(mime_type, mime_subtype)
    part.set_payload(f.read())
    encoders.encode_base64(part)  # Encode file as Base64
    part.add_header(
      'Content-Disposition',
      f'attachment; filename="{yesterday_date}_CIB_Monetary Individuals Transactions.csv"',
    )
    msg.attach(part)

  # Send the email
  try:
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
      server.send_message(msg)
    print(f"Email sent to {TO_EMAIL} successfully!")
    
    # Delete the CSV file after successful email sending
    if os.path.exists(yesterday_csv) and os.path.exists(yesterday_individuals_csv):
      os.remove(yesterday_csv)
      os.remove(yesterday_individuals_csv)
      print(f"CSV file '{yesterday_csv}' and '{yesterday_individuals_csv}' has been deleted.")
  except Exception as e:
    print(f"Failed to send email: {e}")


def monitoring():
  header = {'Authorization': f'Api-Token {API_TOKEN}'}
  api_url = ""
  request = requests.get(api_url, headers=header, verify=False)

  # Fetch and process the JSON data
  if request.status_code == 200:
    api = request.json()
    results = api.get("result", [])
    for result in results:
      datas = result.get('data', [])
      for data in datas:
        dimension = data.get("dimensionMap", {}).get('Dimension', '')
        dimension = dimension.rsplit('-')
        time = datetime.fromtimestamp(data.get('timestamps', [])[0] / 1000 - 60).strftime('%H:%M:%S')
        while len(dimension) != 5:
          if dimension[1][0] not in '123456789':
            dimension = ["-".join(dimension[:2])] + dimension[2:]
          else:
            dimension = dimension[0:2] + ["-".join(dimension[2:4])] + dimension[4:]
        dimension_sender, dimension_sender_id, dimension_beneficiary_name, dimension_transfer_type, dimension_amount = map(str.strip, dimension)
        dimension_sender_id = int(dimension_sender_id)
        dimension_amount = float(dimension_amount)

        with open(today_individuals_csv, mode='a', newline='') as file:
          writer = csv.writer(file)
          writer.writerow([time, dimension_sender, str(dimension_sender_id), dimension_beneficiary_name, dimension_transfer_type, dimension_amount])

        # Load the CSV file if it exists
        if os.path.exists(today_csv):
          df = pd.read_csv(today_csv, delimiter=',')
          df.columns = df.columns.str.strip()

          def emailing(criteria_num):
            transaction = []
            df_individual = pd.read_csv(today_individuals_csv, delimiter=',')

            def filter_and_format(df, tail_count):
              return df.tail(tail_count).apply(
                lambda row: {
                  'time': row['Time'],
                  'sender_acc_name': row['Sender Name'],
                  'sender_acc_no': row['Sender Acc No'],
                  'beneficiary_acc_name': row['Beneficiary Name'],
                  'payment_type': row['Payment Type'],
                  'transfer_amount':  "RM{:,.2f}".format(row['Transfer Amount']),
                },
                axis=1
              ).tolist()

            if criteria_num in ['001', '004']:
              transaction = [
                {
                  'time': time,
                  'sender_acc_name': dimension_sender,
                  'sender_acc_no': dimension_sender_id,
                  'beneficiary_acc_name': dimension_beneficiary_name,
                  'payment_type': dimension_transfer_type,
                  'transfer_amount': "RM{:,.2f}".format(dimension_amount),
                },
              ]
            elif criteria_num == '002':
              df_individual = df_individual[
                (df_individual['Sender Name'] == dimension_sender) &
                (df_individual['Sender Acc No'] == dimension_sender_id) &
                (df_individual['Beneficiary Name'] == dimension_beneficiary_name)
              ]
              transaction = filter_and_format(df_individual, 3)

            elif criteria_num == '003':
              df_individual = df_individual[
                (df_individual['Sender Name'] == dimension_sender) &
                (df_individual['Sender Acc No'] == dimension_sender_id) &
                (df_individual['Transfer Amount'] <= 1000.00)
              ]
              transaction = filter_and_format(df_individual, 10)

            elif criteria_num == '005':
              df_individual = df_individual[
                (df_individual['Sender Name'] == dimension_sender) &
                (df_individual['Sender Acc No'] == dimension_sender_id) &
                (df_individual['Payment Type'] == 'JomPAY')
              ]
              transaction = filter_and_format(df_individual, 3)

            email_data = {
              'message_sender': f'{dimension_sender} ({dimension_sender_id})',
              'criteria_num': criteria_num,
              'datetime': f'{today_date} {time}',
              'transactions': transaction
            }
            send_email(email_data, criteria_num)
          
          occurrences = [
            ("Occurrence 001", dimension_amount, 100000.00, '001', None, None, 'type1'),
            ("Occurrence 004", dimension_amount, 1000000.00, '004', None, None, 'type1'),
            ("Occurrence 003", dimension_amount, 1000.00, '003', 10, 'status 003', 'type2'),
            ("Occurrence 005", dimension_transfer_type, "JomPAY", '005', 3, 'status 005', 'type2'),
            ("Occurrence 002", None, None, '002', 3, 'status 002', 'type3'),
          ]
          
          # Check if the 'dimension_name' exists as a column in the CSV
          if len(df[(df['Acc No'] == dimension_sender_id) & (df['Name'] == dimension_sender) & (df['Beneficiary Name'] == dimension_beneficiary_name)]) == 0:
            print(f"Dimension value '{dimension_sender}' not found in CSV columns.")
            # Prepare the new row to append
            new_row = [dimension_sender, dimension_sender_id, dimension_beneficiary_name, 0, 0, False, 0, False, 0, 0, False]
            index = len(df)
            # Append the new row to the DataFrame
            df = pd.concat([df, pd.Series(new_row, index=df.columns).to_frame().T], ignore_index=True)
            print(f"Added new row with '{dimension_sender}'.")
            # Find the index of the row to update
          else:
            index = df[(df['Acc No'] == dimension_sender_id) & (df['Name'] == dimension_sender) & (df['Beneficiary Name'] == dimension_beneficiary_name)].index[0]
          
          # Loop through occurrences and apply conditions
          for occurrence, dimension, threshold, email_code, _, _, _, in occurrences:
            # Check if the condition for the occurrence is met
            if occurrence == "Occurrence 002":
              df.at[index, occurrence] += 1
            elif occurrence == "Occurrence 003" and dimension <= 1000.00:
              df.at[index, occurrence] += 1
            elif isinstance(dimension, (int, float)) and occurrence != "Occurrence 003" and dimension >= threshold:
              emailing(email_code)
              df.at[index, occurrence] += 1
            elif dimension == threshold:
              df.at[index, occurrence] += 1             

          # Drop and group DataFrame
          df_dropped = df.drop('Beneficiary Name', axis=1).groupby(['Name', 'Acc No']).sum().reset_index()

          # Loop through grouped DataFrame for loop1 columns 
          for index, row in df_dropped.iterrows():
            for condition_column, _, _, _, value, status, loop in occurrences:
              if loop == 'type2':
                if (row['Acc No'] == dimension_sender_id and
                  row['Name'] == dimension_sender and
                  row[condition_column] != 0 and
                  row[condition_column] % value == 0 and
                  row[status] == 0):
                  emailing(condition_column.split(" ")[-1])
                  row[status] = 1
                elif row[condition_column] % value != 0 and row[status] != 0:
                  row[status] = 0

                # Update the original DataFrame based on changes in df_dropped
                df.loc[(df['Name'] == row['Name']) & (df['Acc No'] == row['Acc No']), status] = (row[status] != 0)

          # Loop through original DataFrame for loop2 columns
          for index, row in df.iterrows():
            for condition_column, _, _, _, value, status, loop in occurrences:
              if loop == 'type3':
                if (row['Acc No'] == dimension_sender_id and
                  row['Name'] == dimension_sender and
                  row['Beneficiary Name'] == dimension_beneficiary_name and
                  row[condition_column] != 0 and
                  row[condition_column] % value == 0 and
                  not row[status]):
                  emailing(condition_column.split(" ")[-1])
                  df.at[index, status] = True
                if row[condition_column] % value != 0 and row[status]:
                  df.at[index, status] = False

          # Save the DataFrame to the CSV file only after all changes are done
          df.to_csv(today_csv, index=False)
          print("CSV file updated.")
        else:
          print(f"CSV file '{today_csv}' not found.")      
  else:
    print("API does not exist.")

if __name__ == "__main__":
  import sys
  if len(sys.argv) > 1:
    if sys.argv[1] == "every_minute":
      monitoring()
    elif sys.argv[1] == "at_midnight":
      summary_email()
    else:
      print("Unknown task. Use 'every_minute' or 'at_midnight'.")
  else:
    print("Please specify a task: 'every_minute' or 'at_midnight'.")
